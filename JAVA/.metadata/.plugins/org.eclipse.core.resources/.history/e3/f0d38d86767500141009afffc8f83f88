package domain;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import domain.enums.ScoreBehaviourType;

public class ScoreBehaviourFactory {

	public static ScoreBehaviour create(Evaluation evaluation, ScoreBehaviourType scorebehaviourtype){
		ScoreBehaviour scoreBehaviour = null;

				Class<?> c = Class.forName(scorebehaviourtype.getFQDN());
				Constructor<?> constructor = c.getConstructor(evaluation.getClass());
				try {
					scoreBehaviour = (ScoreBehaviour)constructor.newInstance(evaluation);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			
			return scoreBehaviour;
	}
}
